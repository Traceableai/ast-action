name: Traceable AST Action
description: "GitHub action for Traceable Active Security Testing"
branding:
  icon: 'activity'  
  color: 'red'
inputs:
  step_name:
    required: true
    description: ''
    default: 'NULL'
  scan_name:
    required: false
    description: ''
    default: 'NULL'
  client_scan_token:
    required: true
    description: ''
    default: 'NULL'
  traceable_cli_download_path:
    required: false
    description: ''
    default: 'NULL'
  cli_version:
    required: false
    description: ''
    default: 'latest'
  traffic_env:
    required: true
    description: ''
    default: 'NULL'
  plugins:
    required: false
    description: ''
    default: 'NULL'
  include_url_regex:
    required: false
    description: ''
    default: 'NULL'
  exclude_url_regex:
    required: false
    description: ''
    default: 'NULL'
  target_url:
    required: false
    description: ''
    default: 'NULL'
  traceable_server:
    required: false
    description: ''
    default: 'NULL'
  idle_timeout:
    required: false
    description: ''
    default: '10'
  scan_timeout:
    required: false
    description: ''
    default: 'NULL'
  reference_env:
    required: false
    description: ''
    default: 'NULL'
  max_retries:
    required: false
    description: ''
    default: 'NULL'
  traceable_root_ca:
    required: false
    description: ''
    default: 'NULL'
  traceable_cli_cert:
    required: false
    description: ''
    default: 'NULL'
  traceable_cli_key:
    required: false
    description: ''
    default: 'NULL'

runs:
  using: composite
  steps:
    - name: Download CLI
      if: ${{ inputs.step_name == 'init' || inputs.step_name == 'init and run' }}
      run: |
        if [[ "${{ inputs.traceable_cli_download_path }}" != "NULL" ]]
        then
          curl -oL traceableCli.tar.gz ${{ inputs. traceable_cli_download_path }}
          tar -xvf traceableCli.tar.gz --directory ${GITHUB_WORKSPACE}
        else
          if [[ "${{ inputs.cli_version }}"  = *"-rc."* ]]
          then
            curl -OL https://downloads.traceable.ai/cli/rc/${{ inputs.cli_version }}/tars/traceable-cli-${{ inputs.cli_version }}-linux-x86_64.tar.gz
          fi
          if [[ "${{ inputs.cli_version }}" = "latest" ]]
          then
            curl -OL https://downloads.traceable.ai/cli/rc/${{ inputs.cli_version }}/traceable-cli-${{ inputs.cli_version }}-linux-x86_64.tar.gz
          fi
          tar -xvf ${GITHUB_WORKSPACE}/traceable-cli-${{ inputs.cli_version }}-linux-x86_64.tar.gz --directory ${GITHUB_WORKSPACE}
        fi
      shell: bash
    - name: Init and run command on cli
      if: ${{ inputs.step_name == 'init and run' }}
      run: |
        export LC_ALL=en_US.utf-8
        export LANG=en_US.utf-8
        
        if  [[ -n ${{ inputs.traceable_root_ca }} ]] && [[ ${{ inputs.traceable_root_ca }} != "''" ]] && [[ ${{ inputs.traceable_root_ca }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_root_ca }}" > /tmp/ca_file.crt
          export TRACEABLE_ROOT_CA_FILE_NAME=/tmp/ca_file.crt
        fi
        if  [[ -n ${{ inputs.traceable_cli_cert }} ]] && [[ ${{ inputs.traceable_cli_cert }} != "''" ]] && [[ ${{ inputs.traceable_cli_cert }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_cli_cert }}" > /tmp/ca_cert.crt
          export TRACEABLE_CLI_CERT_FILE_NAME=/tmp/ca_cert.crt
        fi
        if  [[ -n ${{ inputs.traceable_cli_key }} ]] && [[ ${{ inputs.traceable_cli_key }} != "''" ]] && [[ ${{ inputs.traceable_cli_key }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_cli_key }}" > /tmp/ca_key.crt
          export TRACEABLE_CLI_KEY_FILE_NAME=/tmp/ca_key.crt
        fi
        
        traceableCliBinaryLocation=${GITHUB_WORKSPACE}/traceable
        
        scanInitCmd=$traceableCliBinaryLocation' ast scan initAndRun'
        optionsArr=('--scan-name' '--traffic-env' '--token' '--plugins' '--include-url-regex' '--exclude-url-regex' '--target-url' '--traceable-server' '--idle-timeout' '--scan-timeout' ' --reference-env' '--max-retries')
        
        #Iterating the options available from options array and filling them with the arguments received in order
        iterator=0
        for option in '${{ inputs.scan_name }}' '${{ inputs.traffic_env }}' '${{ inputs.client_scan_token }}' '${{ inputs.plugins }}' "${{ inputs.include_url_regex }}" "${{ inputs.exclude_url_regex }}" '${{ inputs.target_url }}' '${{ inputs.traceable_server }}' '${{ inputs.idle_timeout }}' '${{ inputs.scan_timeout }}' '${{ inputs.reference_env }}' '${{ inputs.max_retries }}'
        do
          if [ -z "$option" ] || [ "$option" = "''" ] || [ "$option" = "NULL" ]
          then
            echo "${optionsArr[$iterator]}" is Null
          else
            scanInitCmd=$scanInitCmd"  "${optionsArr[$iterator]}" "${option}
          fi
          iterator=$(($iterator+1))
        done
        
        echo $scanInitCmd
        $scanInitCmd

      shell: bash
    - name: Init command on cli
      if: ${{ inputs.step_name == 'init' }}
      run: |
        export LC_ALL=en_US.utf-8
        export LANG=en_US.utf-8
        
        if  [[ -n ${{ inputs.traceable_root_ca }} ]] && [[ ${{ inputs.traceable_root_ca }} != "''" ]] && [[ ${{ inputs.traceable_root_ca }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_root_ca }}" > /tmp/ca_file.crt
          export TRACEABLE_ROOT_CA_FILE_NAME=/tmp/ca_file.crt
        fi
        if  [[ -n ${{ inputs.traceable_cli_cert }} ]] && [[ ${{ inputs.traceable_cli_cert }} != "''" ]] && [[ ${{ inputs.traceable_cli_cert }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_cli_cert }}" > /tmp/ca_cert.crt
          export TRACEABLE_CLI_CERT_FILE_NAME=/tmp/ca_cert.crt
        fi
        if  [[ -n ${{ inputs.traceable_cli_key }} ]] && [[ ${{ inputs.traceable_cli_key }} != "''" ]] && [[ ${{ inputs.traceable_cli_key }} != "NULL" ]]
        then
          echo "${{ inputs.traceable_cli_key }}" > /tmp/ca_key.crt
          export TRACEABLE_CLI_KEY_FILE_NAME=/tmp/ca_key.crt
        fi
        
        traceableCliBinaryLocation=${GITHUB_WORKSPACE}/traceable
        
        scanInitCmd=$traceableCliBinaryLocation' ast scan init '
        optionsArr=('--scan-name' '--traffic-env' '--token' '--plugins' '--include-url-regex' '--exclude-url-regex' '--target-url' '--traceable-server'  '--scan-timeout' ' --reference-env' )
        
        #Iterating the options available from options array and filling them with the arguments received in order
        iterator=0
        for option in '${{ inputs.scan_name }}' '${{ inputs.traffic_env }}' '${{ inputs.client_scan_token }}' '${{ inputs.plugins }}' "${{ inputs.include_url_regex }}" "${{ inputs.exclude_url_regex }}" '${{ inputs.target_url }}' '${{ inputs.traceable_server }}' '${{ inputs.scan_timeout }}' '${{ inputs.reference_env }}'
        do
          if [ -z "$option" ] || [ "$option" = "''" ] || [ "$option" = "NULL" ]
          then
            echo "${optionsArr[$iterator]}" is Null
          else
            scanInitCmd=$scanInitCmd"  "${optionsArr[$iterator]}" "${option}
          fi
          iterator=$(($iterator+1))
        done
        
        echo $scanInitCmd
        $scanInitCmd
      shell: bash
    - name: Run command on cli
      id: run_scan
      if: ${{ inputs.step_name == 'run' }}
      run: |
        export LC_ALL=en_US.utf-8
        export LANG=en_US.utf-8
        if [ -f "/tmp/ca_file.crt" ]
        then
          export TRACEABLE_ROOT_CA_FILE_NAME=/tmp/ca_file.crt
        fi
        if  [ -f "/tmp/ca_cert.crt" ]
        then
          export TRACEABLE_CLI_CERT_FILE_NAME=/tmp/ca_cert.crt
        fi
        if  [ -f "/tmp/ca_key.crt" ]
        then
          export TRACEABLE_CLI_KEY_FILE_NAME=/tmp/ca_key.crt
        fi
        
        traceableCliBinaryLocation=${GITHUB_WORKSPACE}/traceable
        scanRunCmd=$traceableCliBinaryLocation' ast scan run '
        optionsArr=('--token' '--idle-timeout' '--max-retries' )
        
        #Iterating the options available from options array and filling them with the arguments received in order
        iterator=0
        for option in '${{ inputs.client_scan_token }}' '${{ inputs.idle_timeout }}' '${{ inputs.max_retries }}'
        do
          if [ -z "$option" ] || [ "$option" = "''" ] || [ "$option" = "NULL" ]
          then
            echo "${optionsArr[$iterator]}" is Null
          else
            scanRunCmd=$scanRunCmd" "${optionsArr[$iterator]}" "${option}
          fi
          iterator=$(($iterator+1))
        done
        
        echo $scanRunCmd
        $scanRunCmd
      shell: bash
    - name: Publish report
      if: ${{ inputs.step_name == 'run' || inputs.step_name == 'init and run'}}
      run: |
        ${GITHUB_WORKSPACE}/traceable ast scan report | sed 1,2d >> $GITHUB_STEP_SUMMARY
      shell: bash
    - name: Stop scan
      id: stop_scan
      if: ${{ inputs.step_name == 'stop' }}
      run: |
        ${GITHUB_WORKSPACE}/traceable ast scan stop
      shell: bash