from traceable.ast.testsuite.plugin import Plugin
from traceable.config import logger


class SamplePlugin(Plugin):
    # Required fields
    ###############################################################################
    # This is the category of the plugin and is used to group plugins
    category = "custom"  # Can't be changed
    name = "sample_plugin"  # Name of the plugin
    title = "Sample Plugin"  # Title of the plugin used to display in the vulnerability
    # Description about what the plugin does used to display in the vulnerability
    description = "This is a description text for vulnerability generated by sample plugin"
    # Mitigation for the vulnerability this plugin finds
    mitigation = "This is a mitigation text for vulnerability generated by sample plugin"
    # Severity of the vulnerability this plugin finds
    severity = "CRITICAL"
    # CVSS vector string for the vulnerability this plugin finds. Score is calculated automatically
    # https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?version=3.1&vector=AV:A/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L
    cvss_vector_string = "AV:A/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L"

    # Optional Fields
    ###############################################################################
    impact = "This is a impact text for vulnerability generated by sample plugin"
    references = "This is a references text for vulnerability generated by sample plugin"
    estimated_fix_time = 1.0
    estimated_bounty_value = 100
    tags = {
        "author": "Tester",
    }

    def __init__(self):
        super().__init__()

    # This will be called per testsuite generated per API call
    def run(self):
        logger.info("Running sample plugin")

        # TODO
        # Your custom generator here
        for i in range(0, 2):
            test = self.create_test_case(vector="Sample Test %d" % i, onattribute="http.request.domain")

            # Run all defined pre-hooks
            self.pre_hooks().apply(self.pluginctx, self.attributes)

            # TODO
            # Your custom evaluation logic here
            #

            # Run all defined post-hooks
            self.post_hooks().apply(self.pluginctx, self.attributes)

            # ok = True/False (True = success, False = failure/vulnerability)
            ok = True
            self.submit_test_results(test, ok)
