name: AST GHA Plugin
concurrency: 
  group: ast_gha_plugin
on:
  workflow_dispatch:
    inputs:
     env:
        description: "Env of tests to run"
        type: choice
        options:
          - "dev"
          - "staging"
          - "prod"
          - "eu"
        default: "dev"
        required: true
     cli_version:
        description: "CLI version"
        default: "1.2.0-rc.0"
        required: true
     build_type:
        description: "Repo type for AST CLI"
        type: choice
        options:
          - "internal"
          - "external"
        default: "internal"
        required: true
     slack_channelid:
        description: "Enter Slack channel id to send Webhook notification"
        default: "C040E0RQ7HN"
        required: true
jobs:
  AstScan:
    name: Run Workflow
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          repository: Traceableai/e2e-test
          # ref: main
          token:  ${{ secrets.GH_READ_ONLY_PAT }}
          path: e2e-test
      - name: Setup Python 3.10 for Automation
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install the PyModule requirements
        run: |
          cd e2e-test/ast-automation
          python --version
          python3.10 --version
          python3.10 -m pip install -r requirements.txt
          python3.10 -m pip install pytest-messenger
          python3.10 -m pip install slack_sdk
      
      # - name: Setup crAPI
      #   run: |
      #     sudo su
      #     cd e2e-test/ast-automation/crapi_setup_files
      #     ls -a
      #     # curl -o docker-compose.yml https://raw.githubusercontent.com/OWASP/crAPI/main/deploy/docker/docker-compose.yml
      #     docker-compose pull
      #     docker-compose -f docker-compose.yml --compatibility up -d
      # - name: Setup TA
      #   env:
      #     ENV_NAME: ${{ github.event.inputs.env || 'dev' }}
      #   run: |
      #     docker-compose --version
      #     docker --version
      #     cd e2e-test/ast-automation/ta_setup_files
      #     sudo su
      #     tar -zxf tpa-mirror-compose.tgz
      #     rm tpa-mirror-compose/.env
      #     rm tpa-mirror-compose/docker-compose.yaml
      #     rm tpa-mirror-compose/agentconf/agentconfig.yaml
      #     sed -i "s/TA_ENVIRONMENT.*/TA_ENVIRONMENT=ast_gha_plugin/1" .env
      #     if [ "$ENV_NAME" = "dev" ]
      #     then
      #       sed -i "s/TA_REMOTE_ENDPOINT.*/TA_REMOTE_ENDPOINT=api-$ENV_NAME.traceable.ai:443/1" .env
      #       sed -i "s/TA_REFRESH_TOKEN.*/TA_REFRESH_TOKEN=${{ secrets.DEV_AST_AGENT_TOKEN }}/1" .env
      #     fi
      #     if [ "$ENV_NAME" = "staging" ]
      #     then
      #       sed -i "s/TA_REMOTE_ENDPOINT.*/TA_REMOTE_ENDPOINT=api-$ENV_NAME.traceable.ai:443/1" .env
      #       sed -i "s/TA_REFRESH_TOKEN.*/TA_REFRESH_TOKEN=${{ secrets.STAGING_AST_AGENT_TOKEN }}/1" .env
      #     fi
      #     if [ "$ENV_NAME" = "prod" ]
      #     then
      #       sed -i "s/TA_REMOTE_ENDPOINT.*/TA_REMOTE_ENDPOINT=api.traceable.ai:443/1" .env
      #       sed -i "s/TA_REFRESH_TOKEN.*/TA_REFRESH_TOKEN=${{ secrets.PROD_AST_AGENT_TOKEN }}/1" .env
      #     fi
      #     if [ "$ENV_NAME" = "eu" ]
      #     then
      #       sed -i "s/TA_REMOTE_ENDPOINT.*/TA_REMOTE_ENDPOINT=api.$ENV_NAME.traceable.ai:443/1" .env
      #       sed -i "s/TA_REFRESH_TOKEN.*/TA_REFRESH_TOKEN=${{ secrets.EU_AST_AGENT_TOKEN }}/1" .env
      #     fi
      #     cp -a .env ./tpa-mirror-compose
      #     cp -a docker-compose.yaml ./tpa-mirror-compose
      #     cp -a agentconfig.yaml ./tpa-mirror-compose/agentconf
      #     cd tpa-mirror-compose
      #     ls -a
      #     sudo docker-compose up -d 

      # Init scan action test ##
      - name: Init scan action
        uses: Traceableai/ast-action@main
        with:
          step_name: 'init'
          scan_name: gha_scan_init
          client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
          traffic_env: 'ast_load'
          traceable_server: api-dev.traceable.ai
          cli_version: ${{ github.event.inputs.cli_version || '1.3.0-dev.21' }}
          scan_timeout: 10
          # plugins: 'unauthenticated_access,java_log4shell'
      - name: Run CRAPI Login API
        run: |
          export PYTHONPATH="/"
          export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
          export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
          export ENV=dev
          export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
          export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
          export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
          export PLATFORM_ENV_NAME=ast_load
          export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
          export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
          # export CRAPI_IDENTITY_PORT=8888
          # export CRAPI_EMAIL="test@example.com"
          # export CRAPI_PASSWORD="Test!123"
          # export CRAPI_PORT=8025
          export CRAPI_HOST=18.116.165.77
          export CRAPI_EMAIL="Kory.Howell@example.com"
          export CRAPI_PASSWORD="Uspe48y0EKJguPU"
          export CRAPI_PORT=30025
          export CRAPI_IDENTITY_PORT=8888
          export CRAPI_SERVICE_NAME=ext_cap 
          export PYTHON_VERSION='3.10'
          export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest
          cd e2e-test/ast-automation
          sudo su
          export SCAN_NAME=gha_scan_init
          pytest ./tests/misc/gha_plugin_test.py::test_call_crapi_login_api
      # - name: Run scan action
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'run'
      # - name: Verify Scan Details
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_load
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     # export CRAPI_IDENTITY_PORT=8888
      #     # export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     # export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     # export CRAPI_PORT=8025
      #     export CRAPI_HOST=18.116.165.77
      #     export CRAPI_EMAIL="Kory.Howell@example.com"
      #     export CRAPI_PASSWORD="Uspe48y0EKJguPU"
      #     export CRAPI_PORT=30025
      #     export CRAPI_IDENTITY_PORT=8888
      #     export CRAPI_SERVICE_NAME=ext_cap
      #     export PYTHON_VERSION='3.10'        
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest  
      #     cd e2e-test/ast-automation
      #     sudo su
      #     export SCAN_NAME=gha_scan_init
      #     pytest ./tests/misc/gha_plugin_test.py::test_verify_scan_details
      - name: Stop Scan
        uses: Traceableai/ast-action@main
        with:
          step_name: 'stop'
      - name: Archive Pytest Results on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-result-report.html
          path: ${{ github.workspace }}/e2e-test/ast-automation/Reports/report.html
          retention-days: 7
          if-no-files-found: ignore
      


      # ## Init scan action with all options
      # - name: Init scan action with all options
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'init'
      #     client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
      #     traffic_env: 'ast_gha_plugin'
      #     traceable_server: api-dev.traceable.ai
      #     cli_version: ${{ github.event.inputs.cli_version || '1.3.0-dev.21' }}
      #     scan_name: gha_scan_init_all
      #     plugins: 'unauthenticated_access,java_log4shell'
      #     scan_timeout: 10
      #     include_url_regex: '18.190.157.240'
      #     target_url: '18.190.157.240'
      #     reference_env: 'astbb1'
      # - name: Run CRAPI Login API
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     export CRAPI_IDENTITY_PORT=8888
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=8025
      #     export CRAPI_SERVICE_NAME=ext_cap
      #     export PYTHON_VERSION='3.10'
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest
      #     cd e2e-test/ast-automation
      #     sudo su
      #     export SCAN_NAME=gha_scan_init
      #     pytest ./tests/misc/gha_plugin_test.py::test_call_crapi_login_api
      # - name: Run scan action
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'run'
      #     client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
      #     traffic_env: 'ast_gha_plugin'
      #     cli_version: ${{ github.event.inputs.cli_version || '1.3.0-dev.21' }}
      #     idle_timeout: 5
      #     max_retries: 2
      #     plugins: 'unauthenticated_access,java_log4shell'
      # - name: Verify Scan Details
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     export CRAPI_IDENTITY_PORT=8888
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=8025
      #     export CRAPI_SERVICE_NAME=ext_cap
      #     export PYTHON_VERSION='3.10'        
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest 
      #     export SCAN_NAME=gha_scan_init_all
      #     cd e2e-test/ast-automation
      #     sudo su
      #     pytest ./tests/misc/gha_plugin_test.py::test_verify_scan_details
      # - name: Stop Scan all options
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'stop'
      #     client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
      #     traffic_env: 'ast_gha_plugin'
      #     traceable_server: api-dev.traceable.ai
      # - name: Archive Pytest Results on failure
      #   if: failure()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-result-report.html
      #     path: ${{ github.workspace }}/e2e-test/ast-automation/Reports/report.html
      #     retention-days: 7
      #     if-no-files-found: ignore


      ## Init and run scan action with mandatory options ##
      ## difficult to automate because of this: https://traceableai.atlassian.net/browse/ENG-23804?jql=labels%20%3D%20%22ast-gha-plugin-bug%22

      # - name: Init and run scan action with mandatory options
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'init and run'
      #     client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
      #     traffic_env: 'ast_gha_plugin'
      #     traceable_server: api-dev.traceable.ai
      #     cli_version: ${{ github.event.inputs.cli_version || '1.3.0-dev.21' }}
      #     scan_name: gha_scan2
      #     plugins: 'unauthenticated_access,java_log4shell'
      #     scan_timeout: 10
      # - name: Run CRAPI Login API
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     export CRAPI_HOST=18.190.157.240
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=30025
      #     export CRAPI_IDENTITY_PORT=80
      #     export PYTHON_VERSION='3.10'
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest
      #     cd e2e-test/ast-automation
      #     sudo su
      #     pytest ./tests/misc/gha_plugin_test.py::test_call_crapi_login_api
      # - name: Verify Scan Details
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     export CRAPI_HOST=18.190.157.240
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=30025
      #     export CRAPI_IDENTITY_PORT=80
      #     export PYTHON_VERSION='3.10'        
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest  
      #     cd e2e-test/ast-automation
      #     sudo su
      #     pytest ./tests/misc/gha_plugin_test.py::test_verify_scan_details
      # - name: Stop Scan
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'stop'
      # - name: Archive Pytest Results on failure
      #   if: failure()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-result-report.html
      #     path: ${{ github.workspace }}/e2e-test/ast-automation/Reports/report.html
      #     retention-days: 7
      #     if-no-files-found: ignore


      ##Init and run scan action with all options
      ## difficult to automate because of this: https://traceableai.atlassian.net/browse/ENG-23804?jql=labels%20%3D%20%22ast-gha-plugin-bug%22

      # - name: Init and run scan action with all options
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'init'
      #     client_scan_token: ${{ secrets.PLATFORM_API_TOKEN }}
      #     traffic_env: 'ast_gha_plugin'
      #     traceable_server: api-dev.traceable.ai
      #     cli_version: ${{ github.event.inputs.cli_version || '1.3.0-dev.21' }}
      #     scan_name: gha_scan
      #     plugins: 'unauthenticated_access,java_log4shell'
      #     scan_timeout: 10
      #     include_url_regex: '18.190.157.240'
      #     target_url: '18.190.157.240'
      #     reference_env: 'astbb1'
      #     idle_timeout: 5
      #     max_retries: 2
      # - name: Run CRAPI Login API
      #   run: |
      #     export CRAPI_HOST=18.190.157.240
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=30025
      #     export CRAPI_IDENTITY_PORT=80
      #     cd ast-automation
      #     sudo su
      #     pytest ./tests/e2e_regression/gha_plugin_test.py::test_call_crapi_login_api
      # - name: Verify Scan Details
      #   run: |
      #     export CRAPI_HOST=18.190.157.240
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     cd ast-automation
      #     sudo su
      #     pytest ./tests/misc/gha_plugin_test.py::test_verify_scan_details
      # - name: Verify Scan Details
      #   run: |
      #     export PYTHONPATH="/"
      #     export SLACK_TOKEN=${{ secrets.SLACK_API_TOKEN }}
      #     export channelId=${{ github.event.inputs.slack_channelid || 'C040E0RQ7HN' }}
      #     export ENV=dev
      #     export PLATFORM_USERNAME=${{ secrets.AST_PLATFORM_USERNAME }}
      #     export PLATFORM_PASSWORD=${{ secrets.AST_PLATFORM_PASSWORD }}
      #     export PLATFORM_API_TOKEN=${{ secrets.PLATFORM_API_TOKEN }}
      #     export PLATFORM_ENV_NAME=ast_gha_plugin
      #     export PLATFORM_USER_FIRST_NAME=at_enterprise_protection@traceabletest.ai
      #     export EXECUTION_MODE=${{ github.event.inputs.execution_mode || 'Docker'}}
      #     export CRAPI_HOST=18.190.157.240
      #     export CRAPI_EMAIL="Kyler.Bergnaum@example.com"
      #     export CRAPI_PASSWORD=${{ secrets.CRAPI_PASSWORD }}
      #     export CRAPI_PORT=30025
      #     export CRAPI_IDENTITY_PORT=80
      #     export PYTHON_VERSION='3.10'        
      #     export DOCKER_CLI_REPO=traceableai-docker.jfrog.io/traceableai/traceable-cli:latest  
      #     cd e2e-test/ast-automation
      #     sudo su
      #     pytest ./tests/misc/gha_plugin_test.py::test_verify_scan_details
      # - name: Stop Scan
      #   uses: Traceableai/ast-action@main
      #   with:
      #     step_name: 'stop'
      # - name: Archive Pytest Results on failure
      #   if: failure()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-result-report.html
      #     path: ${{ github.workspace }}/e2e-test/ast-automation/Reports/report.html
      #     retention-days: 7
      #     if-no-files-found: ignore

